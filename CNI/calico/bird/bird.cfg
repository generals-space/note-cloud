# Generated by confd
include "bird_aggr.cfg";
include "bird_ipam.cfg";

router id 192.168.0.121;

# Configure synchronization between routing tables and kernel.
## 关于`protocol`块, 我觉得可能与`ip route`的输出结果中的`proto`字段有关.
## 很多路由记录的`proto`字段都为`kernel`.
protocol kernel {
  learn;             # Learn all alien routes from the kernel
  persist;           # 开启持久化, bird停止后这些路由也不会丢失.
  scan time 2;       # Scan kernel routing table every 2 seconds
  ## Specify a filter to be used for filtering routes 
  ## coming from the protocol to the routing table.
  ## all is for keeping all routes, none is for dropping all routes. 
  ## Default: all (except for EBGP).
  ## 指定一个过滤器, 用于处理从BGP协议到路由表的数据包(...从protoco是指?)
  import all;
  ## This is similar to the import keyword, except that it works in the direction
  ## from the routing table to the protocol. 
  ## Default: none (except for EBGP).
  ## 下面的`calico_kernel_XXX`在`bird_ipam.cfg`中声明.
  export filter calico_kernel_programming; 
  # Turn on graceful restart to reduce potential flaps in
  # routes when reloading BIRD configuration. 
  # With a full automatic mesh, there is no way to prevent BGP from flapping 
  # since multiple nodes update their BGP configuration at the same time,
  # GR is not guaranteed to work correctly in this scenario.
  graceful restart; 
}

# Watch interface up/down events.
## 监听网络接口的up/down事件.
protocol device {
  debug { states };
  scan time 2;    # Scan interfaces every 2 seconds
}

protocol direct {
  debug { states };
  interface -"cali*", "*"; # Exclude cali* but include everything else.
}

# Template for all BGP clients
## 可以理解为, `template bgp`部分是一个模板, 
## 而更下面的`protocol bgp Mesh_XXX from bgp_template`继承了该模板的所有属性.
template bgp bgp_template {
  debug { states };
  description "Connection to BGP peer";
  ## local 必选项
  ## calico为所有宿主机节点都指定了相同的AS(自治系统) ID.
  local as 64512;
  multihop;
  # This should be the default, but just in case.
  ## 默认选项, 以防万一.
  gateway recursive; 
  # Import all routes, since we don't know what the upstream
  # topology is and therefore have to trust the ToR/RR.
  ## 出口流量全部允许.
  import all;
  # Only want to export routes for workloads.
  ## 下面的 calico_export_XXX 在 bird_ipam.cfg文件中声明.
  ## 只接受filter中指定的来自Pod CIDR范围内的请求.
  export filter calico_export_to_bgp_peers; 
  # The local address we use for the TCP connection
  ## 对外宣告的本机地址.
  source address 192.168.0.121; 
  add paths on;
  # See comment in kernel section about graceful restart.
  ## 见`kernel`部分的`graceful restart`
  graceful restart; 
  connect delay time 2;
  connect retry time 5;
  error wait time 5,30;
}

# ------------- Node-to-node mesh -------------
## 这里的信息应该是calico-node进程在监听到宿主机节点变动后自动更新的.

# For peer /host/k8s-master-01/ip_addr_v4
# Skipping ourselves (192.168.0.121)

# For peer /host/k8s-worker-01/ip_addr_v4
protocol bgp Mesh_192_168_0_124 from bgp_template {
  neighbor 192.168.0.124 as 64512;
  # Mesh is unidirectional, peer will connect to us.
  ## passive model 被动模式, 默认为off, 与ftp中的被动模式原理相同.
  ## 在取off时, 允许主动请求连接其他节点, 同时允许接受流入连接.
  ## 如果取on, 则只允许被动接受, 但不允许主动请求.
  passive on; 
}

# For peer /host/k8s-worker-02/ip_addr_v4
protocol bgp Mesh_192_168_0_125 from bgp_template {
  neighbor 192.168.0.125 as 64512;
  passive on; # Mesh is unidirectional, peer will connect to us.
}

## 上面的都是自动更新的, 下面的应该是全局的, 和静态定义的部分.

# ------------- Global peers -------------
# No global peers configured.

# ------------- Node-specific peers -------------

# No node-specific peers configured.
