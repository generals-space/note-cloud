/*
   哇咔咔, 我是文件头!!!
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	mycrdgroupv1 "mycrd/pkg/apis/mycrdgroup/v1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMyCrds implements MyCrdInterface
type FakeMyCrds struct {
	Fake *FakeMycrdgroupV1
	ns   string
}

var mycrdsResource = schema.GroupVersionResource{Group: "mycrdgroup.k8s.io", Version: "v1", Resource: "mycrds"}

var mycrdsKind = schema.GroupVersionKind{Group: "mycrdgroup.k8s.io", Version: "v1", Kind: "MyCrd"}

// Get takes name of the myCrd, and returns the corresponding myCrd object, and an error if there is any.
func (c *FakeMyCrds) Get(name string, options v1.GetOptions) (result *mycrdgroupv1.MyCrd, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(mycrdsResource, c.ns, name), &mycrdgroupv1.MyCrd{})

	if obj == nil {
		return nil, err
	}
	return obj.(*mycrdgroupv1.MyCrd), err
}

// List takes label and field selectors, and returns the list of MyCrds that match those selectors.
func (c *FakeMyCrds) List(opts v1.ListOptions) (result *mycrdgroupv1.MyCrdList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(mycrdsResource, mycrdsKind, c.ns, opts), &mycrdgroupv1.MyCrdList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &mycrdgroupv1.MyCrdList{ListMeta: obj.(*mycrdgroupv1.MyCrdList).ListMeta}
	for _, item := range obj.(*mycrdgroupv1.MyCrdList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested myCrds.
func (c *FakeMyCrds) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(mycrdsResource, c.ns, opts))

}

// Create takes the representation of a myCrd and creates it.  Returns the server's representation of the myCrd, and an error, if there is any.
func (c *FakeMyCrds) Create(myCrd *mycrdgroupv1.MyCrd) (result *mycrdgroupv1.MyCrd, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(mycrdsResource, c.ns, myCrd), &mycrdgroupv1.MyCrd{})

	if obj == nil {
		return nil, err
	}
	return obj.(*mycrdgroupv1.MyCrd), err
}

// Update takes the representation of a myCrd and updates it. Returns the server's representation of the myCrd, and an error, if there is any.
func (c *FakeMyCrds) Update(myCrd *mycrdgroupv1.MyCrd) (result *mycrdgroupv1.MyCrd, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(mycrdsResource, c.ns, myCrd), &mycrdgroupv1.MyCrd{})

	if obj == nil {
		return nil, err
	}
	return obj.(*mycrdgroupv1.MyCrd), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeMyCrds) UpdateStatus(myCrd *mycrdgroupv1.MyCrd) (*mycrdgroupv1.MyCrd, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(mycrdsResource, "status", c.ns, myCrd), &mycrdgroupv1.MyCrd{})

	if obj == nil {
		return nil, err
	}
	return obj.(*mycrdgroupv1.MyCrd), err
}

// Delete takes name of the myCrd and deletes it. Returns an error if one occurs.
func (c *FakeMyCrds) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(mycrdsResource, c.ns, name), &mycrdgroupv1.MyCrd{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMyCrds) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(mycrdsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &mycrdgroupv1.MyCrdList{})
	return err
}

// Patch applies the patch and returns the patched myCrd.
func (c *FakeMyCrds) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *mycrdgroupv1.MyCrd, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(mycrdsResource, c.ns, name, pt, data, subresources...), &mycrdgroupv1.MyCrd{})

	if obj == nil {
		return nil, err
	}
	return obj.(*mycrdgroupv1.MyCrd), err
}
