apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress:
  bindPort: 6443
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  ## 指定固定 token, 以后创建的 kube 集群, 都可以使用该 token 进行访问, 对于调试来说, 很方便.
  token: abcdef.0123456789abcdef
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
nodeRegistration:
  ## 默认通过 dockershim 与 dockerd 通信, 现在直接指定 containerd 服务, 绕过 dockerd.
  ## criSocket: /var/run/dockershim.sock
  ## containerd 随 docker 安装, 也随 docker 服务启动而启动.
  criSocket: unix:///var/run/containerd/containerd.sock

---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
kubernetesVersion: v1.17.2
clusterName: kubernetes
apiServer:
  timeoutForControlPlane: 4m0s
  extraArgs:
    enable-admission-plugins: NodeRestriction
    authorization-mode: "Node,RBAC"
    endpoint-reconciler-type: lease
  ## kubectl 所用的 kubeconfig 中, cluster.server 的地址必须是该列表中的其中一个才能够访问.
  ## 比如, 在阿里云上创建 kube 集群, 公网IP是会变化的, controlPlaneEndpoint 只能写内网地址,
  ## 但是在本地开发时, kubeconfig 中如果写公网IP是无法访问集群的, 会被拒绝. 
  ## 因此这里最好设置一个域名, 本地将该域名与公网IP写入 hosts, IP变化就无法影响了.
  ## 默认一定会包含 control plane 的 hostname 值.
  certSANs:
  - kubernetes
  - k8s-master-01
  - ${eth0_IP}
certificatesDir: /etc/kubernetes/pki
## 这里的 ${eth0_IP} 也可以写成域名, 比如 k8s-master-01.
## 但是要求所有节点能通过该域名访问到 apiserver, 一般需要写入 /etc/hosts
controlPlaneEndpoint: ${eth0_IP}:6443
imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
networking:
  dnsDomain: cluster.local
  podSubnet: 10.254.0.0/16
  serviceSubnet: 10.96.0.0/12
controllerManager: {}
scheduler: {}

---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
ipvs:
  minSyncPeriod: 1s
  syncPeriod: 10s
mode: ipvs
